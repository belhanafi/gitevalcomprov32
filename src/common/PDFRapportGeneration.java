package common;


import java.util.Date;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;

import com.itextpdf.text.ListItem;
import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;


















import java.net.MalformedURLException;
import java.nio.file.Paths;

import org.zkoss.zk.ui.Sessions;
import org.zkoss.zul.Filedownload;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Font.FontFamily;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Header;
import com.itextpdf.text.Image;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.ColumnText;
import com.itextpdf.text.pdf.GrayColor;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import compagne.bean.EmployesAEvaluerBean;
import compagne.bean.FicheEvaluationBean;
import compagne.model.FicheEvaluationJsonModel;

public class PDFRapportGeneration {


	private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
			Font.BOLD);

	private static Font txtFont = new Font(Font.FontFamily.TIMES_ROMAN, 10,
			Font.NORMAL);
	
	private static Font paragrapheFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
			Font.NORMAL);
	
	private static Font txtFontBold = new Font(Font.FontFamily.TIMES_ROMAN, 10,
			Font.BOLDITALIC);
	
	private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
			Font.NORMAL, BaseColor.RED);
	private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
			Font.BOLD);
	private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
			Font.BOLD);
	private static Font tableHeaderFont = FontFactory.getFont(FontFactory.HELVETICA, 8, Font.BOLDITALIC);
	private static Font tablecellFont = FontFactory.getFont(FontFactory.HELVETICA, 8, Font.NORMAL);



	/**
	 * Creates a PDF with information about the movies
	 * @param    filename the name of the PDF file that will be created.
	 * @throws    DocumentException 
	 * @throws    IOException
	 */
	public static void createPdf(HashMap <String, ArrayList<FicheEvaluationBean>> mapFicheValide, EmployesAEvaluerBean employeinfo, String evalutaur, String structure, String posteTravail , String  nom_compagne, Integer compagne_id) throws DocumentException, IOException
	{


		String file_name="resultat_evaluation_"+employeinfo.getNom_employe().trim()+".pdf";
		Document document = new Document();


		PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(file_name));
		document.open();

		String reportLocation = Sessions.getCurrent().getWebApp().getRealPath("WEB-INF");

		Image img = Image.getInstance(reportLocation+ "/Logo_ah_entete.jpg");
		//img.setAbsolutePosition(450f, 10f);
		//img.scaleToFit(1000,1000);
		img.setAbsolutePosition(5f, 800f);
		img.scalePercent(70f);

		document.add(img);

		File file = new File(file_name);
		//file.getParentFile().mkdirs();
		addContent(document,employeinfo,evalutaur,structure,posteTravail,nom_compagne,compagne_id);
		new PDFRapportGeneration().addTable(file_name,mapFicheValide,document);
		Filedownload.save(file, "PDF");

		document.close();








	}


	private static void addContent(Document document,EmployesAEvaluerBean employeinfo, String evalutaur, String structure, String posteTravail, String nom_compagne, Integer compagne_id)
			throws DocumentException {
		Paragraph preface = new Paragraph();
		// We add one empty line
		addEmptyLine(preface, 1);
		// Lets write a big header
		preface.add(new Paragraph("Compagne d'évaluation des Compétences: " +nom_compagne, catFont));

		addEmptyLine(preface, 1);
		// Will create: Report generated by: _name, _date
		preface.add(new Paragraph(
				"Rapport d'évaluation de : " + "Madame/Monsieur: "+employeinfo.getNom_employe() , //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
				txtFont));
		addEmptyLine(preface, 1);
		

		// String info_generale="Evaluateur: "+evalutaur+"      Structure: "+ structure +"     Poste Travail: "+posteTravail; 
		//preface.add(new Paragraph(	  info_generale,      txtFont));   addEmptyLine(preface, 8);
		
		document.add(preface);
		
		
		PdfPTable table1 = new PdfPTable(6);

		table1.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
		table1.addCell(new Phrase("Evaluateur:",tablecellFont));
		table1.addCell(new Phrase(evalutaur,tablecellFont));

		table1.addCell(new Phrase("Structure:",tablecellFont));
		table1.addCell(new Phrase(structure,tablecellFont));

		table1.addCell(new Phrase("Poste Travail:",tablecellFont));
		table1.addCell(new Phrase(posteTravail,tablecellFont));
		document.add(table1);
		
		Paragraph preface1 = new Paragraph();
		addEmptyLine(preface1, 6);
		
	
		
		String remerciment= " Merci d'avoir participer à la compagne d'évaluation de compétences de votre département. Ci-après les résultats de votre évaluation:";
		preface1.add(new Paragraph(remerciment,	paragrapheFont));
		
		FicheEvaluationJsonModel init= new FicheEvaluationJsonModel();
		Map<String, Float> map=init.getIMIetIMG(employeinfo.getId_employe(),compagne_id);
		
		String resultat_imi="";
		String resultat_img="";
		
		for (Entry<String, Float> pair : map.entrySet()) {
			
			if (pair.getKey().equalsIgnoreCase("IMI")){
				
				resultat_imi=String.valueOf(pair.getValue());
				
			}else{
				resultat_img=String.valueOf(pair.getValue());
			}
			
		}
		
		addEmptyLine(preface1, 1);
		
		String  imi_img="Indice de maitrise Individuel: " +resultat_imi+ " ;             Indice de maitrise global du poste de Travail: "+resultat_img+".";
		
		preface1.add(new Paragraph(imi_img,	txtFontBold));

		addEmptyLine(preface1, 4);
		
		String appreciation_generale="Appréciation Générale du Manager:";
		
		preface1.add(new Paragraph(appreciation_generale,	catFont));
		
		String commentaire="Les resultats sont encouragantes et conformes à ses compétences, néaumoins  des progrès reste à faire"
				+ " sur le plan de la communication individuelle et le travail en équipe.";
		preface1.add(new Paragraph(commentaire,	paragrapheFont));

		document.add(preface1);
		// Start a new page
		document.newPage();
	}


	

	public void addTable(String dest,HashMap <String, ArrayList<FicheEvaluationBean>> mapFicheValide,Document document) throws IOException, DocumentException {


		String reportLocation = Sessions.getCurrent().getWebApp().getRealPath("WEB-INF");

		Image img = Image.getInstance(reportLocation+ "/Logo_ah_entete.jpg");
		//img.setAbsolutePosition(450f, 10f);
		//img.scaleToFit(1000,1000);
		img.setAbsolutePosition(5f, 800f);
		img.scalePercent(70f);

		document.add(img);
		Paragraph preface = new Paragraph();
		addEmptyLine(preface, 2);
		document.add(preface);

		// table with 2 columns:
		PdfPTable table = new PdfPTable(4);
		table.setWidthPercentage(100);
		Font f = new Font(FontFamily.TIMES_ROMAN, 10, Font.NORMAL, GrayColor.GRAYWHITE);

		// header row:
		table.addCell("Compétence");
		table.addCell("Aptitude observable");
		table.addCell("Niveau de Maitrise");
		table.addCell("Actions Corretives");
		table.setHeaderRows(1);
		//table.setSkipFirstHeader(true);
		// many data rows:
		/*for (int i = 1; i < 51; i++) {
            table.addCell("col1: " + i);
            table.addCell("col2: " + i);
            table.addCell("col3: " + i);
            table.addCell("col4: " + i);
            table.addCell("col5: " + i);

        }*/

		for (Entry<String, ArrayList<FicheEvaluationBean>> entry : mapFicheValide.entrySet()) {


			String famille=entry.getKey();

			/*cell = new PdfPCell(new Phrase(famille));
    		cell.setRowspan(1);
    		table.addCell(cell);*/
			int i=1;


			for (FicheEvaluationBean element : entry.getValue()) {


				//table.addCell(new Phrase(famille,f));

				table.addCell(new Phrase(element.getLibelle_competence()));
				table.addCell(new Phrase(element.getAptitude_observable()));
				table.addCell(new Phrase(String.valueOf(element.getNiveau_maitrise())));
				table.addCell(new Phrase(" Actions correctives à définir "));
				i++;




			}




		}
		document.add(table);

	}

	/**
	 * Creates our first table
	 * @return our first table
	 */
	public static PdfPTable createFirstTable(HashMap <String, ArrayList<FicheEvaluationBean>> mapFicheValide) {

		// a table with three columns
		PdfPTable table = new PdfPTable(5);
		// the cell object
		PdfPCell cell;
		// we add a cell with colspan 3
		cell = new PdfPCell(new Phrase("Famille"));
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Compétence"));
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Aptitude observable"));
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Niveau de Maitrise"));
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Actions Corretives"));
		cell.setColspan(1);
		table.addCell(cell);
		int taille_tableau=0;

		for (Entry<String, ArrayList<FicheEvaluationBean>> entry : mapFicheValide.entrySet()) {

			taille_tableau=entry.getValue().size();
			table.setHeaderRows(taille_tableau);
			String famille=entry.getKey();

			/*cell = new PdfPCell(new Phrase(famille));
    		cell.setRowspan(1);
    		table.addCell(cell);*/



			for (FicheEvaluationBean element : entry.getValue()) {

				table.addCell(famille);
				table.addCell(element.getLibelle_competence());
				table.addCell(element.getAptitude_observable());
				table.addCell(String.valueOf(element.getNiveau_maitrise()));
				table.addCell("");




			}


		}


		return table;
	}

	private static void createList(Section subCatPart) {
		List list = new List(true, false, 10);
		list.add(new ListItem("First point"));
		list.add(new ListItem("Second point"));
		list.add(new ListItem("Third point"));
		subCatPart.add(list);
	}

	private static void addEmptyLine(Paragraph paragraph, int number) {
		for (int i = 0; i < number; i++) {
			paragraph.add(new Paragraph(" "));
		}
	}

}