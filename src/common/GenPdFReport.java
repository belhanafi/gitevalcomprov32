package common;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map.Entry;

import kpi.bean.KpiIMIAgeBean;

import org.zkoss.zul.Filedownload;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import compagne.bean.EmployesAEvaluerBean;
import compagne.bean.FicheEvaluationBean;


public class GenPdFReport {
        private static String FILE = "c:/temp/FirstPdf.pdf";
        private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
                        Font.BOLD);
        private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
                        Font.NORMAL, BaseColor.RED);
        private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
                        Font.BOLD);
        private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
                        Font.BOLD);

       public static void exporterResultatPDF(HashMap <String, ArrayList<FicheEvaluationBean>> mapFicheValide, EmployesAEvaluerBean employeinfo, String evalutaur) throws DocumentException, IOException{
    	   
    	  
    	 
    	   String file_name="resultat_evaluation_"+employeinfo.getNom_employe().trim()+".pdf";    
    	   FileOutputStream fOut= new FileOutputStream(file_name);

                	   Document document = new Document();
                        PdfWriter.getInstance(document, fOut);
                        document.open();
                        //addMetaData(document);
                        //addTitlePage(document);
                        addContent(document,mapFicheValide,employeinfo,evalutaur);
                        document.close();
                        
                    	fOut.flush();
                		fOut.close();

                		File file = new File(file_name);
                		Filedownload.save(file, "PDF");
               
        }

        // iText allows to add metadata to the PDF which can be viewed in your Adobe
        // Reader
        // under File -> Properties
        private static void addMetaData(Document document) {
                document.addTitle("My first PDF");
                document.addSubject("Using iText");
                document.addKeywords("Java, PDF, iText");
                document.addAuthor("Author");
                document.addCreator("Creator");
        }

        private static void addTitlePage(Document document)
                        throws DocumentException {
                Paragraph preface = new Paragraph();
                // We add one empty line
                addEmptyLine(preface, 1);
                // Lets write a big header
                preface.add(new Paragraph("Title of the document", catFont));

                addEmptyLine(preface, 1);
                // Will create: Report generated by: _name, _date
                preface.add(new Paragraph(
                                "Report generated by: " + System.getProperty("user.name") + ", " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
                                smallBold));
                addEmptyLine(preface, 3);
                preface.add(new Paragraph(
                                "This document describes something which is very important ",
                                smallBold));

                addEmptyLine(preface, 8);

                preface.add(new Paragraph(
                                "This document is a preliminary version and not subject to your license agreement or any other agreement with vogella.com ;-).",
                                redFont));

                document.add(preface);
                // Start a new page
                document.newPage();
        }

        private static void addContent(Document document,HashMap <String, ArrayList<FicheEvaluationBean>> mapFicheValide, EmployesAEvaluerBean employeinfo, String evalutaur) throws DocumentException {
        	
        
                Anchor anchor = new Anchor("First Chapter", catFont);
                anchor.setName("Compagne Evaluation");

                // Second parameter is the number of the chapter
                Chapter catPart = new Chapter(new Paragraph(anchor), 1);

                Paragraph subPara = new Paragraph("Subcategory 1", subFont);
                Section subCatPart = catPart.addSection(subPara);
                subCatPart.add(new Paragraph(evalutaur));
                
                createList(subCatPart);
                Paragraph paragraph = new Paragraph();
                addEmptyLine(paragraph, 5);
                subCatPart.add(paragraph);


                // add a table
                createTable(subCatPart,mapFicheValide,employeinfo,evalutaur);

                // now add all this to the document
                document.add(catPart);

               

        }

        private static void createTable(Section subCatPart,HashMap <String, ArrayList<FicheEvaluationBean>> mapFicheValide, EmployesAEvaluerBean employeinfo, String evalutaur)
                        throws BadElementException {
        	
        	
        	/*PdfPTable table = new PdfPTable(3);

            // t.setBorderColor(BaseColor.GRAY);
            // t.setPadding(4);
            // t.setSpacing(4);
            // t.setBorderWidth(1);

            PdfPCell c1 = new PdfPCell(new Phrase("Table Header 1"));
            c1.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(c1);

            c1 = new PdfPCell(new Phrase("Table Header 2"));
            c1.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(c1);

            c1 = new PdfPCell(new Phrase("Table Header 3"));
            c1.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(c1);
            table.setHeaderRows(1);
            
            table.addCell("1.0");
            table.addCell("1.1");
            table.addCell("1.2");
            table.addCell("1.3");
            table.addCell("2.1");
            table.addCell("2.2");
            table.addCell("2.3");
            table.addCell("2.4");
            
            subCatPart.add(table);*/
      	  
        	
                PdfPTable table = new PdfPTable(5);

                // t.setBorderColor(BaseColor.GRAY);
                // t.setPadding(4);
                // t.setSpacing(4);
                // t.setBorderWidth(1);

                PdfPCell c1 = new PdfPCell(new Phrase("Famille"));
                c1.setHorizontalAlignment(Element.ALIGN_CENTER);
                table.addCell(c1);

                c1 = new PdfPCell(new Phrase("Compétence"));
                c1.setHorizontalAlignment(Element.ALIGN_CENTER);
                table.addCell(c1);

                c1 = new PdfPCell(new Phrase("Aptitude observable"));
                c1.setHorizontalAlignment(Element.ALIGN_CENTER);
                table.addCell(c1);
                
                c1 = new PdfPCell(new Phrase("Niveau de Maitrise"));
                c1.setHorizontalAlignment(Element.ALIGN_CENTER);
                table.addCell(c1);
                
                c1 = new PdfPCell(new Phrase("Actions Corretives"));
                c1.setHorizontalAlignment(Element.ALIGN_CENTER);
                table.addCell(c1);
                
                table.setHeaderRows(1);
                int taille_tableau=0;
                
             
               
                
               for (Entry<String, ArrayList<FicheEvaluationBean>> entry : mapFicheValide.entrySet()) {
                          	
                	taille_tableau=entry.getValue().size();
                	table.setHeaderRows(taille_tableau);
                	String famille=entry.getKey();
                	
                	
           		   
           		   for (FicheEvaluationBean element : entry.getValue()) {
           			  
           			table.addCell(famille);
           			table.addCell(element.getLibelle_competence());
           			table.addCell(element.getAptitude_observable());
           			table.addCell(String.valueOf(element.getNiveau_maitrise()));
           			table.addCell("");

           		   
           			   
           			   
           		   }

          			
           	   }
               
               subCatPart.add(table);
                
                
                //table.setHeaderRows(taille_tableau);

                /*table.addCell("1.0");
                table.addCell("1.1");
                table.addCell("1.2");
                table.addCell("2.1");
                table.addCell("2.2");
                table.addCell("2.3");*/

             

        }

        private static void createList(Section subCatPart) {
                List list = new List(true, false, 10);
                list.add(new ListItem("First point"));
                list.add(new ListItem("Second point"));
                list.add(new ListItem("Third point"));
                subCatPart.add(list);
        }

        private static void addEmptyLine(Paragraph paragraph, int number) {
                for (int i = 0; i < number; i++) {
                        paragraph.add(new Paragraph(" "));
                }
        }
}